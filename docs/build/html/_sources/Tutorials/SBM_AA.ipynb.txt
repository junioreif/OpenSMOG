{
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "### Perform a simulation with an All-Atom Structure-Based Model using OpenSMOG\r\n",
    "\r\n",
    "This tutorial should take between 5 to 15 minutes of reading and performing simulations.\r\n",
    "\r\n",
    "Input files for this tutorial can be found [here](https://github.com/junioreif/OpenSMOG/tree/main/Tutorials/SMOG2_AA_CI2)"
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "The first step is to import the **OpenSMOG** module"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "from OpenSMOG import SBM"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "SBM class sets the parameters for the simulation:\n",
    "\n",
    "`name=\"2ci2\"` Sets the name of each simulation *(this name is used as prefix for the outputs)*. <br>\n",
    "`time_step=0.002 ` (**reduced time unit**) Sets the time step used in integration. <br>\n",
    "`collision_rate=1.0` (**reduced inverse-time unit**) Sets the collision rate in the Langevin integrator.  <br>\n",
    "`r_cutoff=1.2` (**nanometers**) Sets the non-bonded cutoff. <br>\n",
    "`temperature=0.5` (**reduced temperature unit**) Sets the temperature for the simulation. <br>\n",
    "\n",
    "sbm_AA is an arbitrarily chosen variable name for the SBM object"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "sbm_AA = SBM(name='2ci2', time_step=0.002, collision_rate=1.0, r_cutoff=1.2, temperature=0.5)"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "There are three hardware platform options to run the simulations: \r\n",
    "\r\n",
    "`platform=\"cuda\"` <br>\r\n",
    "`platform=\"HIP\"` <br>\r\n",
    "`platform=\"opencl\"` <br>\r\n",
    "`platform=\"cpu\"` <br>\r\n",
    "\r\n",
    "if **cuda**, **opencl** or **HIP** is choosen the GPUindex can be define as \"0\". If two GPUs are used, one may give \"0,1\" \r\n"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "sbm_AA.setup_openmm(platform='cuda',GPUindex='default')"
   ],
   "outputs": [],
   "metadata": {
    "tags": []
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Sets the directory name where the output files are saved"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "sbm_AA.saveFolder('output_2ci2_AA')"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "Load the **gro**, **top** and **xml** files into the sbm_AA object"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "sbm_AA_grofile = 'SMOG2_AA_CI2/2ci2.AA.gro'\r\n",
    "sbm_AA_topfile = 'SMOG2_AA_CI2/2ci2.AA.top'\r\n",
    "sbm_AA_xmlfile = 'SMOG2_AA_CI2/2ci2.AA.xml'\r\n",
    "\r\n",
    "sbm_AA.loadSystem(Grofile=sbm_AA_grofile, Topfile=sbm_AA_topfile, Xmlfile=sbm_AA_xmlfile)"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "This function returns the name of each contact potential that is being used in the current model.\n",
    "In this example, only a Lennard-Jones-style 6-12 potential is being applied."
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "The simulation **context** is created with all information given in the previous steps."
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "sbm_AA.createSimulation()"
   ],
   "outputs": [],
   "metadata": {
    "tags": []
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Create the **reporters** that will save the simulation data in an output folder.\r\n",
    "\r\n",
    "`trajectory=True` Save the trajectory in .dcd format. <br>\r\n",
    "`energies=True` Save the energy in text format separated by a comma. <br>\r\n",
    "`interval=10**3` The interval (in steps) at which the trajectory and energies are saved."
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "sbm_AA.createReporters(trajectory=True, energies=True, energy_components=True, interval=10**3)"
   ],
   "outputs": [],
   "metadata": {
    "tags": []
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "The `run` function receives the following parameters:\n",
    "\n",
    "`nsteps=10**6` Number of steps to perform in the simulation. <br>\n",
    "`report=True` Shows the simulation details (Progress (%), Step and Time Remaining) <br>\n",
    "`interval=10**3` The step interval to show the details"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "source": [
    "sbm_AA.run(nsteps=10**6, report=True, interval=10**3)"
   ],
   "outputs": [],
   "metadata": {
    "scrolled": true,
    "tags": []
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "The output files are located in the output folder"
   ],
   "metadata": {}
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "242cae9b8452ece2cb6489a184e39dc6b7b0499be08472c01ccb8b91635bb5bf"
  },
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3.7.11 64-bit ('openmm': conda)"
  },
  "language_info": {
   "name": "python",
   "version": "3.9.6",
   "mimetype": "text/x-python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "pygments_lexer": "ipython3",
   "nbconvert_exporter": "python",
   "file_extension": ".py"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}